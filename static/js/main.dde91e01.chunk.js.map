{"version":3,"sources":["appRoot/yupConfig.js","util/formValidation/yupLocale.js","appRoot/app/AppFadeInWrapper.jsx","screens/LoadingScreen.jsx","appRoot/RootRouter.jsx","screens/error/NetworkErrorScreen.jsx","screens/error/UnexpectedErrorScreen.jsx","appRoot/RootErrorBoundary.jsx","util/serviceWorker.js","index.jsx","appRoot/App.jsx"],"names":["setLocale","mixed","required","_ref","path","concat","string","email","addTspidToYup","addTnToYup","addFormatTnToYup","indexHtmlLoading","document","getElementById","FadeIn","styled","div","_templateObject","visible","propTypes","PropTypes","bool","defaultProps","AppFadeInWrapper","_ref2","children","_useState","useState","_useState2","Object","slicedToArray","setVisible","_useState3","_useState4","indexHtmlLoadingVisible","setIndexHtmlLoadingVisible","useEffect","onTransitionEnd","classList","add","react_default","a","createElement","LoadingScreen","HomeScreen","lazy","__webpack_require__","e","then","bind","AdminScreen","FormScreen","Promise","all","NotFoundScreen","RootRouter","react","fallback","LoadingScreen_LoadingScreen","react_router_dom","react_router","exact","component","NetworkErrorScreen","Fragment","Helmet_default","type","onClick","window","location","reload","UnexpectedErrorScreen","RootErrorBoundary","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","_this$state","errorType","NetworkErrorScreen_NetworkErrorScreen","UnexpectedErrorScreen_UnexpectedErrorScreen","err","message","match","Component","Boolean","hostname","ReactDOM","render","AppFadeInWrapper_AppFadeInWrapper","RootErrorBoundary_RootErrorBoundary","RootRouter_RootRouter","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dde91e01.chunk.js","sourcesContent":["import { setLocale } from 'yup';\n\nimport { yupLocale } from 'util/formValidation/yupLocale';\nimport { addTspidToYup, addTnToYup, addFormatTnToYup } from 'js-util-lib';\n\nsetLocale(yupLocale);\n\naddTspidToYup();\naddTnToYup();\naddFormatTnToYup();\n","// This is just an example; we should ideally come up with some standard validation error messages\n// Then they should be put into js-util-lib and used in all of our apps\n\n// https://github.com/jquense/yup/blob/master/src/locale.js\nconst yupLocale = {\n   mixed: {\n      required: ({ path }) => `${path} is actually needed`,\n   },\n   string: {\n      email: () => `That doesn't look like a valid email`,\n   },\n};\n\nexport { yupLocale };\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst indexHtmlLoading = document.getElementById('index-html-loading');\n\nconst hideIndexHtmlLoading = div => {\n   div.classList.add('app-loaded');\n};\n\nconst FadeIn = styled.div`\n   opacity: ${({ visible }) => (visible ? 1 : 0)};\n   transition: opacity 0.5s ease;\n`;\n\nFadeIn.propTypes = {\n   visible: PropTypes.bool,\n};\n\nFadeIn.defaultProps = {\n   visible: false,\n};\n\nconst AppFadeInWrapper = ({ children }) => {\n   const [visible, setVisible] = useState(false);\n   const [indexHtmlLoadingVisible, setIndexHtmlLoadingVisible] = useState(true);\n\n   useEffect(() => {\n      setVisible(true);\n   }, []);\n\n   const onTransitionEnd = indexHtmlLoadingVisible\n      ? () => {\n           hideIndexHtmlLoading(indexHtmlLoading);\n           setIndexHtmlLoadingVisible(false);\n        }\n      : null;\n\n   return (\n      <FadeIn visible={visible} onTransitionEnd={onTransitionEnd}>\n         {children}\n      </FadeIn>\n   );\n};\n\nAppFadeInWrapper.propTypes = {\n   children: PropTypes.node.isRequired,\n};\n\nexport { AppFadeInWrapper };\n","import React from 'react';\n\nconst LoadingScreen = () => (\n   <div>\n      <h2>Loading...</h2>\n   </div>\n);\n\nexport { LoadingScreen };\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { LoadingScreen } from 'screens/LoadingScreen';\n\nconst HomeScreen = lazy(() => import('screens/HomeScreen'));\nconst AdminScreen = lazy(() => import('screens/AdminScreen'));\nconst FormScreen = lazy(() => import('screens/FormScreen'));\nconst NotFoundScreen = lazy(() => import('screens/error/NotFoundScreen'));\n\nconst RootRouter = () => (\n   <Suspense fallback={<LoadingScreen />}>\n      <Router>\n         <Switch>\n            <Route path=\"/\" exact component={HomeScreen} />\n            <Route path=\"/admin/\" component={AdminScreen} />\n            <Route path=\"/form/\" component={FormScreen} />\n            <Route component={NotFoundScreen} />\n         </Switch>\n      </Router>\n   </Suspense>\n);\n\nexport { RootRouter };\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nconst NetworkErrorScreen = () => (\n   <>\n      <Helmet>\n         <title>Network Error</title>\n      </Helmet>\n      <h1>Network Error</h1>\n      <p>Check your internet connection and reload this page.</p>\n      <button type=\"button\" onClick={() => window.location.reload()}>\n         Try Again\n      </button>\n   </>\n);\n\nexport { NetworkErrorScreen };\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nconst UnexpectedErrorScreen = () => (\n   <>\n      <Helmet>\n         <title>Unexpected Error</title>\n      </Helmet>\n      <h1>Unexpected Error</h1>\n      <p>\n         Reload this page and try again later. Contact support if you continue\n         to experience this error.\n      </p>\n   </>\n);\n\nexport { UnexpectedErrorScreen };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { NetworkErrorScreen } from 'screens/error/NetworkErrorScreen';\nimport { UnexpectedErrorScreen } from 'screens/error/UnexpectedErrorScreen';\n\nclass RootErrorBoundary extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n   }\n\n   static getDerivedStateFromError(err) {\n      const errorType = err.message.match(/^Loading/)\n         ? 'Network'\n         : 'Unexpected';\n      return { hasError: true, errorType };\n   }\n\n   render() {\n      const { hasError, errorType } = this.state;\n      const { children } = this.props;\n      if (hasError && errorType === 'Network') {\n         return <NetworkErrorScreen />;\n      }\n      if (hasError && errorType === 'Unexpected') {\n         return <UnexpectedErrorScreen />;\n      }\n\n      return children;\n   }\n}\n\nRootErrorBoundary.propTypes = {\n   children: PropTypes.node.isRequired,\n};\n\nexport { RootErrorBoundary };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nfunction registerValidSW(swUrl, config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n         // eslint-disable-next-line no-param-reassign\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     // eslint-disable-next-line no-console\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     // eslint-disable-next-line no-console\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch(error => {\n         // eslint-disable-next-line no-console\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl)\n      .then(response => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         // eslint-disable-next-line no-console\n         console.log(\n            'No internet connection found. App is running in offline mode.'\n         );\n      });\n}\n\nexport function register(config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               // eslint-disable-next-line no-console\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n         registration.unregister();\n      });\n   }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'appRoot/App';\nimport * as serviceWorker from 'util/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('index-html-root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\n// NOTE: with some modification, this can be imported in each schema but only run once to reduce the App bundle size\n// It will instead increase the bundle size of the (I think) first loaded page that uses yup.\n// However, if it is not imported EVERYWHERE that it is needed, a potentially obscure bug will be introduced\n// Therefore, this should only be done if absolutely needed to marginally improve initial page load speed\nimport './yupConfig';\n\nimport { AppFadeInWrapper } from './app/AppFadeInWrapper';\nimport { RootRouter } from './RootRouter';\nimport { RootErrorBoundary } from './RootErrorBoundary';\n\n// TODO: consider memoizing a child of App if multiple renders is a problem\nconst App = () => (\n   <AppFadeInWrapper>\n      <RootErrorBoundary>\n         <RootRouter />\n      </RootErrorBoundary>\n   </AppFadeInWrapper>\n);\n\nexport { App };\n"],"sourceRoot":""}