{"version":3,"sources":["appRoot/logo.svg","appRoot/app/AppFadeInWrapper.jsx","util/serviceWorker.js","index.jsx","appRoot/App.jsx"],"names":["module","exports","__webpack_require__","p","indexHtmlLoading","document","getElementById","FadeIn","styled","div","_templateObject","_ref","visible","propTypes","PropTypes","bool","defaultProps","AppFadeInWrapper","_ref2","children","_useState","useState","_useState2","Object","slicedToArray","setVisible","_useState3","_useState4","indexHtmlLoadingVisible","setIndexHtmlLoadingVisible","useEffect","onTransitionEnd","classList","add","react_default","a","createElement","Boolean","window","location","hostname","match","ReactDOM","render","AppFadeInWrapper_AppFadeInWrapper","className","src","logo","alt","href","target","rel","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4VCIxC,IAAMC,EAAmBC,SAASC,eAAe,sBAM3CC,EAASC,IAAOC,IAAVC,IACE,SAAAC,GAAA,OAAAA,EAAGC,QAAyB,EAAI,IAI9CL,EAAOM,UAAY,CAChBD,QAASE,IAAUC,MAGtBR,EAAOS,aAAe,CACnBJ,SAAS,GAGZ,IAAMK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EACVC,oBAAS,GADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjCR,EADiCU,EAAA,GACxBG,EADwBH,EAAA,GAAAI,EAEsBL,oBAAS,GAF/BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEjCE,EAFiCD,EAAA,GAERE,EAFQF,EAAA,GAIxCG,oBAAU,WACPL,GAAW,IACX,IAEH,IAAMM,EAAkBH,EACnB,WACwBxB,EA1BzB4B,UAAUC,IAAI,cA2BVJ,GAA2B,IAE9B,KAEL,OACGK,EAAAC,EAAAC,cAAC7B,EAAD,CAAQK,QAASA,EAASmB,gBAAiBA,GACvCZ,2BC5BUkB,QACY,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACtB,iECZTC,IAASC,OAAOT,EAAAC,EAAAC,cCCJ,kBACTF,EAAAC,EAAAC,cAACQ,EAAD,KACGV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACZX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cACfX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCd,EAAAC,EAAAC,cAAA,iBACQF,EAAAC,EAAAC,cAAA,0BADR,wBAGAF,EAAAC,EAAAC,cAAA,KACGS,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJP,mBDTI,MAAS9C,SAASC,eAAe,oBDiI1C,kBAAmB8C,WACpBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAChCA,EAAaC","file":"static/js/main.80d251dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst indexHtmlLoading = document.getElementById('index-html-loading');\n\nconst hideIndexHtmlLoading = div => {\n   div.classList.add('app-loaded');\n};\n\nconst FadeIn = styled.div`\n   opacity: ${({ visible }) => (visible ? 1 : 0)};\n   transition: opacity 0.5s ease;\n`;\n\nFadeIn.propTypes = {\n   visible: PropTypes.bool,\n};\n\nFadeIn.defaultProps = {\n   visible: false,\n};\n\nconst AppFadeInWrapper = ({ children }) => {\n   const [visible, setVisible] = useState(false);\n   const [indexHtmlLoadingVisible, setIndexHtmlLoadingVisible] = useState(true);\n\n   useEffect(() => {\n      setVisible(true);\n   }, []);\n\n   const onTransitionEnd = indexHtmlLoadingVisible\n      ? () => {\n           hideIndexHtmlLoading(indexHtmlLoading);\n           setIndexHtmlLoadingVisible(false);\n        }\n      : null;\n\n   return (\n      <FadeIn visible={visible} onTransitionEnd={onTransitionEnd}>\n         {children}\n      </FadeIn>\n   );\n};\n\nAppFadeInWrapper.propTypes = {\n   children: PropTypes.node.isRequired,\n};\n\nexport { AppFadeInWrapper };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nfunction registerValidSW(swUrl, config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n         // eslint-disable-next-line no-param-reassign\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     // eslint-disable-next-line no-console\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     // eslint-disable-next-line no-console\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch(error => {\n         // eslint-disable-next-line no-console\n         console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl)\n      .then(response => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type');\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         // eslint-disable-next-line no-console\n         console.log(\n            'No internet connection found. App is running in offline mode.'\n         );\n      });\n}\n\nexport function register(config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               // eslint-disable-next-line no-console\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n         registration.unregister();\n      });\n   }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'appRoot/App';\nimport * as serviceWorker from 'util/serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('index-html-root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport { AppFadeInWrapper } from './app/AppFadeInWrapper';\nimport logo from './logo.svg';\nimport './App.css';\n\n// TODO: consider memoizing a child of App if multiple renders is a problem\nconst App = () => (\n   <AppFadeInWrapper>\n      <div className=\"App\">\n         <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n               Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n               className=\"App-link\"\n               href=\"https://reactjs.org\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n            >\n               Learn React\n            </a>\n         </header>\n      </div>\n   </AppFadeInWrapper>\n);\n\nexport { App };\n"],"sourceRoot":""}